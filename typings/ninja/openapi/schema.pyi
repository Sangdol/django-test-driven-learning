"""
This type stub file was generated by pyright.
"""

from typing import Dict, Generator, List, Optional, TYPE_CHECKING, Tuple
from ninja.operation import Operation
from ninja.types import DictStrAny
from ninja import NinjaAPI

if TYPE_CHECKING:
    ...
REF_PREFIX: str = ...
BODY_CONTENT_TYPES: Dict[str, str] = ...
def get_schema(api: NinjaAPI, path_prefix: str = ...) -> OpenAPISchema:
    ...

class OpenAPISchema(dict):
    def __init__(self, api: NinjaAPI, path_prefix: str) -> None:
        ...
    
    def get_paths(self) -> DictStrAny:
        ...
    
    def methods(self, operations: list) -> DictStrAny:
        ...
    
    def operation_details(self, operation: Operation) -> DictStrAny:
        ...
    
    def operation_parameters(self, operation: Operation) -> List[DictStrAny]:
        ...
    
    def request_body(self, operation: Operation) -> DictStrAny:
        ...
    
    def responses(self, operation: Operation) -> Dict[int, DictStrAny]:
        ...
    
    def operation_security(self, operation: Operation) -> Optional[List[DictStrAny]]:
        ...
    
    def get_components(self) -> DictStrAny:
        ...
    
    def add_schema_definitions(self, definitions: dict) -> None:
        ...
    


def flatten_properties(prop_name: str, prop_details: DictStrAny, prop_required: bool, definitions: DictStrAny) -> Generator[Tuple[str, DictStrAny, bool], None, None]:
    """
    extracts all nested model's properties into flat properties
    (used f.e. in GET params with multiple arguments and models)
    """
    ...

def resolve_allOf(details: DictStrAny, definitions: DictStrAny) -> None:
    """
    resolves all $ref's in 'allOf' section
    """
    ...

def merge_schemas(schemas: List[DictStrAny]) -> DictStrAny:
    ...

