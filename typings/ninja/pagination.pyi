"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from typing import Any, Callable, List, Optional
from django.db.models import QuerySet
from ninja import Router, Schema
from ninja.operation import Operation
from ninja.types import DictStrAny

class PaginationBase(ABC):
    class Input(Schema):
        ...
    
    
    InputSource = ...
    class Output(Schema):
        items: List[Any]
        count: int
        ...
    
    
    items_attribute: str = ...
    def __init__(self, *, pass_parameter: Optional[str] = ..., **kwargs: Any) -> None:
        ...
    
    @abstractmethod
    def paginate_queryset(self, queryset: QuerySet, pagination: Any, **params: DictStrAny) -> Any:
        ...
    


class LimitOffsetPagination(PaginationBase):
    class Input(Schema):
        limit: int = ...
        offset: int = ...
    
    
    def paginate_queryset(self, queryset: QuerySet, pagination: Input, **params: DictStrAny) -> Any:
        ...
    


class PageNumberPagination(PaginationBase):
    class Input(Schema):
        page: int = ...
    
    
    def __init__(self, page_size: int = ..., **kwargs: Any) -> None:
        ...
    
    def paginate_queryset(self, queryset: QuerySet, pagination: Input, **params: DictStrAny) -> Any:
        ...
    


def paginate(func_or_pgn_class: Any = ..., **paginator_params: DictStrAny) -> Callable:
    """
    @api.get(...
    @paginage
    def my_view(request):

    or

    @api.get(...
    @paginage(PageNumberPagination)
    def my_view(request):

    """
    ...

class RouterPaginated(Router):
    def __init__(self, *args: Any, **kwargs: Any) -> None:
        ...
    
    def add_api_operation(self, path: str, methods: List[str], view_func: Callable, **kwargs: Any) -> None:
        ...
    


def make_response_paginated(paginator: PaginationBase, op: Operation) -> None:
    """
    Takes operation response and changes it to the paginated response
    for example:
        response=List[Some]
    will be changed to:
        response=PagedSome
    where Paged some willbe a subclass of paginator.Output:
        class PagedSome:
            items: List[Some]
            count: int
    """
    ...

