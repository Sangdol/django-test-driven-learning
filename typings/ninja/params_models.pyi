"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from typing import List, Optional, TYPE_CHECKING, Type, TypeVar
from django.http import HttpRequest
from pydantic import BaseModel
from ninja.types import DictStrAny
from ninja import NinjaAPI

if TYPE_CHECKING:
    ...
__all__ = ["ParamModel", "QueryModel", "PathModel", "HeaderModel", "CookieModel", "BodyModel", "FormModel", "FileModel"]
TModel = TypeVar("TModel", bound="ParamModel")
TModels = List[TModel]
def NestedDict() -> DictStrAny:
    ...

class ParamModel(BaseModel, ABC):
    _param_source = ...
    @classmethod
    @abstractmethod
    def get_request_data(cls, request: HttpRequest, api: NinjaAPI, path_params: DictStrAny) -> Optional[DictStrAny]:
        ...
    
    @classmethod
    def resolve(cls: Type[TModel], request: HttpRequest, api: NinjaAPI, path_params: DictStrAny) -> TModel:
        ...
    


class QueryModel(ParamModel):
    @classmethod
    def get_request_data(cls, request: HttpRequest, api: NinjaAPI, path_params: DictStrAny) -> Optional[DictStrAny]:
        ...
    


class PathModel(ParamModel):
    @classmethod
    def get_request_data(cls, request: HttpRequest, api: NinjaAPI, path_params: DictStrAny) -> Optional[DictStrAny]:
        ...
    


class HeaderModel(ParamModel):
    _flatten_map: DictStrAny
    @classmethod
    def get_request_data(cls, request: HttpRequest, api: NinjaAPI, path_params: DictStrAny) -> Optional[DictStrAny]:
        ...
    


class CookieModel(ParamModel):
    @classmethod
    def get_request_data(cls, request: HttpRequest, api: NinjaAPI, path_params: DictStrAny) -> Optional[DictStrAny]:
        ...
    


class BodyModel(ParamModel):
    _single_attr: str
    @classmethod
    def get_request_data(cls, request: HttpRequest, api: NinjaAPI, path_params: DictStrAny) -> Optional[DictStrAny]:
        ...
    


class FormModel(ParamModel):
    @classmethod
    def get_request_data(cls, request: HttpRequest, api: NinjaAPI, path_params: DictStrAny) -> Optional[DictStrAny]:
        ...
    


class FileModel(ParamModel):
    @classmethod
    def get_request_data(cls, request: HttpRequest, api: NinjaAPI, path_params: DictStrAny) -> Optional[DictStrAny]:
        ...
    


class _HttpRequest(HttpRequest):
    body: bytes = ...


class _MultiPartBodyModel(BodyModel):
    _body_params: DictStrAny
    @classmethod
    def get_request_data(cls, request: HttpRequest, api: NinjaAPI, path_params: DictStrAny) -> Optional[DictStrAny]:
        ...
    


