"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, List, Optional, Sequence, TYPE_CHECKING, Union
from django.http import HttpRequest, HttpResponse
from django.http.response import HttpResponseBase
from ninja import NinjaAPI, Router

if TYPE_CHECKING:
    ...
__all__ = ["Operation", "PathView", "ResponseObject"]
class Operation:
    def __init__(self, path: str, methods: List[str], view_func: Callable, *, auth: Optional[Union[Sequence[Callable], Callable, object]] = ..., response: Any = ..., operation_id: Optional[str] = ..., summary: Optional[str] = ..., description: Optional[str] = ..., tags: Optional[List[str]] = ..., deprecated: Optional[bool] = ..., by_alias: bool = ..., exclude_unset: bool = ..., exclude_defaults: bool = ..., exclude_none: bool = ..., include_in_schema: bool = ...) -> None:
        ...
    
    def run(self, request: HttpRequest, **kw: Any) -> HttpResponseBase:
        ...
    
    def set_api_instance(self, api: NinjaAPI, router: Router) -> None:
        ...
    


class AsyncOperation(Operation):
    def __init__(self, *args: Any, **kwargs: Any) -> None:
        ...
    
    async def run(self, request: HttpRequest, **kw: Any) -> HttpResponseBase:
        ...
    


class PathView:
    def __init__(self) -> None:
        ...
    
    def add_operation(self, path: str, methods: List[str], view_func: Callable, *, auth: Optional[Union[Sequence[Callable], Callable, object]] = ..., response: Any = ..., operation_id: Optional[str] = ..., summary: Optional[str] = ..., description: Optional[str] = ..., tags: Optional[List[str]] = ..., deprecated: Optional[bool] = ..., by_alias: bool = ..., exclude_unset: bool = ..., exclude_defaults: bool = ..., exclude_none: bool = ..., url_name: Optional[str] = ..., include_in_schema: bool = ...) -> Operation:
        ...
    
    def set_api_instance(self, api: NinjaAPI, router: Router) -> None:
        ...
    
    def get_view(self) -> Callable:
        ...
    


class ResponseObject:
    "Basically this is just a helper to be able to pass response to pydantic's from_orm"
    def __init__(self, response: HttpResponse) -> None:
        ...
    


